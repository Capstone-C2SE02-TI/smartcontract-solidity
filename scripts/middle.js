const hre = require("hardhat");
const {
    MIDDLE_CONTRACT_ADDRESS,
} = require("../contract-metadatas/middle.metadata");
const MIDDLE_METADATA = require("../artifacts/contracts/middle.sol/middle.json");
async function main() {
    const  provider = hre.ethers.providers.getDefaultProvider(
        process.env.ALCHEMY_API_URL
    );

    const dex_iface = new hre.ethers.utils.Interface(
        MIDDLE_METADATA["abi"]
    );
    const wallet = new ethers.Wallet(process.env.ADMIN_PRIVATE_KEY2, provider);
    const pancakeswapAddr = "0xeff92a263d31888d860bd50809a8d171709b7b1c";

    console.log(wallet.address)
    const rawTransaction = {
        to: MIDDLE_CONTRACT_ADDRESS,
        // value: hre.ethers.utils.hexValue(paidETH),
        data: dex_iface.encodeFunctionData("copyTrading", [pancakeswapAddr,'0x7ff36ab50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000072598E10eF4c7C0E651f1eA3CEEe74FCf0A76CF20000000000000000000000000000000000000000000000000000000064418d830000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d600000000000000000000000007865c6E87B9F70255377e024ace6630C1Eaa37F']),
        gasLimit: 210000,
        value :'0x'
    };

    const signedTx = await wallet.signTransaction(rawTransaction);

    const buyTxResponse = await wallet.sendTransaction(rawTransaction);

    await buyTxResponse.wait();

    // console.log(await middleContract.connect(provider).estimateGas.copyTrading(pancakeswapAddr,'0x7ff36ab50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000028c6c06298d514db089934071355e5743bf21d600000000000000000000000000000000000000000000000000000000064414c940000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d60000000000000000000000002c974b2d0ba1716e644c1fc59982a89ddd2ff724'))
    // console.log(
    //     await middleContract
    //         .connect(owner)
    //         .copyTrading(pancakeswapAddr, '0x7ff36ab50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000028c6c06298d514db089934071355e5743bf21d600000000000000000000000000000000000000000000000000000000064414b680000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d60000000000000000000000002c974b2d0ba1716e644c1fc59982a89ddd2ff724')
    // );
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
